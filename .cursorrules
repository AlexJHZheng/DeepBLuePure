# pure-admin 重点开发规则

## 基本规则
- 所有代码需要先说明用途，征得同意后再进行开发。
- 所有功能块必须要先写好注释。

## API 规则
- 所有接口请求必须通过 `src/utils/http` 封装的 http 实例（PureHttp），禁止直接用 axios。
- 接口基础地址（baseURL）统一通过 `.env` 文件配置，代码中用 `import.meta.env.VITE_API_URL` 获取。
- 新增接口需在 `src/api` 下按业务模块分类，返回类型必须定义 TypeScript 类型。
- 接口方法参数、返回值、注释需与后端文档保持一致。
- JDY接口地址为VITE_API_URL
- FUMA接口的话地址为VITE_FUMA_API_URL
## 拦截器规则
- 请求拦截器自动携带 token，token 过期时自动调用 `/refresh-token` 刷新，刷新期间新请求会等待。
- `/login` 和 `/refresh-token` 接口不携带 token（白名单）。
- 响应拦截器统一处理接口返回，支持自定义回调，关闭进度条动画。
- token 失效或未登录时自动跳转登录页，并清理本地用户信息。

## 错误处理规则
- 所有接口异常（如网络错误、后端返回 success: false）必须统一处理，弹窗或消息提示用户。
- 禁止在业务代码中直接 try-catch axios，异常由 http 封装统一处理。
- 错误信息需友好、明确，便于用户理解和排查。

## 路由规则
- 路由配置统一在 `src/router` 下，支持静态和动态路由，动态路由根据用户角色/权限生成。
- 路由懒加载（动态 import），受权限控制的路由需配置 meta 字段（如 roles、permissions、auths）。
- 路由 meta 字段权限配置：
  - `roles`: 页面级别权限，数组，指定哪些角色可访问该路由。
  - `permissions` 或 `auths`: 按钮/操作级别权限，数组，指定该页面下可用的按钮权限标识。
- 动态路由需根据后端返回的角色/权限动态生成，未登录用户访问受限页面时，自动重定向到登录页。
- keep-alive 只支持到二级缓存，三级及以上路由拍平成二级。

## 路由权限与按钮权限规范
- 路由权限：
  - 每个受权限控制的路由，必须在 meta 中配置 `roles` 字段，如：
    ```js
    meta: {
      title: "系统管理",
      roles: ["admin", "manager"]
    }
    ```
  - 动态路由根据用户登录返回的 `roles` 字段进行过滤和生成，只有拥有对应角色的用户才能访问。
  - 前端路由守卫（如 beforeEach）需校验用户角色，无权限则重定向到 403 或登录页。
- 按钮权限：
  - 按钮权限标识统一由后端返回，前端页面通过 meta 字段 `permissions` 或 `auths` 配置，如：
    ```js
    meta: {
      title: "按钮权限",
      auths: ["user:add", "user:edit", "user:delete"]
    }
    ```
  - 用户登录后，接口返回的 `permissions` 字段为该用户所有按钮权限集合。
  - 前端通过指令（如 v-auth）或工具函数判断当前用户是否有某按钮权限，未授权按钮应隐藏或禁用。
  - 示例：
    ```vue
    <el-button v-if="hasAuth('user:add')">新增</el-button>
    ```
  - `hasAuth` 工具函数需判断用户权限集合中是否包含指定标识。

## 组件使用规则
- 通用组件放在 `src/components`，命名采用大驼峰（PascalCase），文件名与组件名一致。
- 组件 props、emits 必须定义类型，禁止 any。
- 组件样式必须使用 scoped，禁止全局污染。
- 禁止直接操作 DOM，需通过 Vue 方式实现。

## 其他
- 代码必须通过 ESLint/Prettier 检查，禁止提交未格式化代码。
- 所有新增功能需补充注释，重要逻辑需写明思路。
- Git 提交信息遵循 Angular 规范（如 feat、fix、refactor 等）。

# 图标
使用图表库 @iconify-icons

#登录接口
#JDY接口
1. 用户登录
   - 路径: POST /api/user/login
   - 说明: 用户登录接口，返回token和用户基本信息
   - 参数: 
     * username: string，用户名，必填
     * password: string，密码，必填
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         avatar: number,
         username: string,
         nickname: string,
         roles: [],
         permissions: [],
         accessToken: string,
         refreshToken: string
         expires: 
       }
   - 权限: 无需验证
  2.获取路由
  

2. 权限管理
 权限管理
   a. 获取权限列表
   - 路径: GET /api/permissions
   - 说明: 获取权限列表，支持分页
   - 参数:
     * page: number，页码，默认为1
     * page_size: number，每页数量，默认为20
   - 返回数据:
     * code: 状态码（200表示成功）
     * data: {
         list: [
           {
             id: number,
             permission_name: string,
             permission_key: string,
             status: number,
             create_time: string,
             update_time: string
           }
         ],
         pagination: {
           total: number,
           page: number,
           page_size: number
         }
       }
   - 权限: SUPER_ADMIN

   b. 创建权限
   - 路径: POST /api/permissions
   - 说明: 创建新权限
   - 参数:
     * menu_id: number，菜单ID，必填
     * permission_name: string，权限名称，必填
     * permission_key: string，权限标识，必填，唯一
   - 返回数据:
     * code: 状态码（200表示成功）
     * data: {
         id: number
       }
   - 权限: SUPER_ADMIN

   c. 更新权限
   - 路径: PUT /api/permissions/:id
   - 说明: 更新权限信息
   - 参数:
     * permission_name: string，权限名称
     * permission_key: string，权限标识
     * status: number，状态 (0:禁用, 1:正常)
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
   - 权限: SUPER_ADMIN

   d. 删除权限
   - 路径: DELETE /api/permissions/:id
   - 说明: 删除权限（如果被角色使用则不能删除）
   - 参数: 无
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
   - 权限: SUPER_ADMIN
3. 菜单管理
   a. 分页获取菜单
   - 路径: GET /api/menus
   - 说明: 获取菜单列表，支持分页和搜索
   - 参数:
     * page: number，页码，必填
     * page_size: number，每页数量，必填
     * keyword: string，搜索关键词（可选，支持name、title模糊查找）
     * status: number，状态筛选（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         list: [
           {
             id: number,
             parent_id: number,
             name: string,
             path: string,
             component: string,
             title: string,
             icon: string,
             order_num: number,
             status: number,
             create_time: string,
             update_time: string
           }
         ],
         pagination: {
           total: number,
           page: number,
           page_size: number
         }
       }
   - 权限: 需要token验证

   b. 新增菜单
   - 路径: POST /api/menus
   - 说明: 创建新菜单
   - 参数:
     * name: string，菜单路由名称，必填
     * path: string，菜单路由路径，必填
     * component: string，组件路径，必填
     * title: string，菜单标题，必填
     * icon: string，菜单图标（可选）
     * order_num: number，显示顺序（可选，默认0）
     * status: number，状态（可选，默认1）
     * parent_id: number，父菜单ID（可选，默认0）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         menu_id: number
       }
   - 权限: 需要token验证

   c. 修改菜单
   - 路径: PUT /api/menus/:menu_id
   - 说明: 更新菜单信息
   - 参数:
     * name: string，菜单路由名称（可选）
     * path: string，菜单路由路径（可选）
     * component: string，组件路径（可选）
     * title: string，菜单标题（可选）
     * icon: string，菜单图标（可选）
     * order_num: number，显示顺序（可选）
     * status: number，状态（可选）
     * parent_id: number，父菜单ID（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   d. 删除菜单
   - 路径: DELETE /api/menus/:menu_id
   - 说明: 删除菜单（会级联删除sys_role_menu关联）
   - 参数: 无
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证
4. 角色管理
   a. 分页获取角色
   - 路径: GET /api/roles
   - 说明: 获取角色列表，支持分页和搜索
   - 参数:
     * page: number，页码，必填
     * page_size: number，每页数量，必填
     * keyword: string，搜索关键词（可选，支持role_name、role_key模糊查找）
     * status: number，状态筛选（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         list: [
           {
             id: number,
             role_name: string,
             role_key: string,
             status: number,
             create_time: string,
             update_time: string,
             permissions: [ { id: number, permission_name: string } ],
             menus: [ { id: number, title: string } ]
           }
         ],
         pagination: {
           total: number,
           page: number,
           page_size: number
         }
       }
   - 权限: 需要token验证

   b. 修改角色
   - 路径: PUT /api/roles/:role_id
   - 说明: 更新角色信息
   - 参数:
     * role_name: string，角色名称（可选）
     * role_key: string，角色标识（可选）
     * status: number，状态（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   c. 删除角色
   - 路径: DELETE /api/roles/:role_id
   - 说明: 删除角色（会级联删除sys_role_permission、sys_role_menu关联，若有用户使用则不能删除）
   - 参数: 无
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   d. 分配角色权限
   - 路径: POST /api/roles/:role_id/permissions
   - 说明: 为角色分配权限，会覆盖原有的权限配置
   - 参数:
     * permission_ids: number[]，权限ID数组，必填
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   e. 分配角色页面（菜单）
   - 路径: POST /api/roles/:role_id/menus
   - 说明: 为角色分配页面（菜单），会覆盖原有的页面配置
   - 参数:
     * menu_ids: number[]，菜单ID数组，必填
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证
5. 用户管理
   a. 分页获取用户
   - 路径: GET /api/users
   - 说明: 获取用户列表，支持分页和搜索
   - 参数:
     * page: number，页码，必填
     * page_size: number，每页数量，必填
     * keyword: string，搜索关键词（可选，支持username、nickname模糊查找）
     * status: number，状态筛选（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         list: [
           {
             user_id: number,
             username: string,
             nickname: string,
             avatar: string,
             status: number,
             fuma_id: int,
             create_time: string,
             update_time: string,
             roles: string // 逗号分隔的角色名
           }
         ],
         pagination: {
           total: number,
           page: number,
           page_size: number
         }
       }
   - 权限: 需要token验证

   b. 新增用户
   - 路径: POST /api/users
   - 说明: 创建新用户
   - 参数:
     * username: string，用户名，必填
     * password: string，密码，必填
     * nickname: string，昵称（可选）
     * avatar: string，头像（可选）
     * fuma_id: int，孚盟ID（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: { user_id: number }
   - 权限: 需要token验证

   c. 修改用户
   - 路径: PUT /api/users/:user_id
   - 说明: 更新用户信息
   - 参数:
     * nickname: string，昵称（可选）
     * avatar: string，头像（可选）
     * status: number，状态（可选）
     * fuma_id: int，孚盟ID（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   d. 删除用户
   - 路径: DELETE /api/users/:user_id
   - 说明: 删除用户（会级联删除sys_user_role关联）
   - 参数: 无
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   e. 修改用户密码
   - 路径: POST /api/users/:user_id/password
   - 说明: 修改用户密码
   - 参数:
     * new_password: string，新密码，必填，长度不能小于6位
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证

   f. 分配用户角色
   - 路径: POST /api/users/:user_id/roles
   - 说明: 为指定用户分配角色，role_ids为角色ID数组，分配时会覆盖原有角色
   - 参数:
     * role_ids: number[]，角色ID数组，必填
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: null
   - 权限: 需要token验证
7. 产品分析（月度分析）
   a. 分页获取分析数据
   - 路径: GET /api/analyze_product
   - 说明: 分页获取 analyze_product 表数据，支持按 analysis_month、category、ItemNo 条件过滤，analysis_month 不传时自动返回最近月份。
   - 参数:
     * page: number，页码，必填
     * page_size: number，每页数量，必填
     * analysis_month: string，分析月份（可选，不传则查最近月份）
     * category: string，品类（可选）
     * itemNo: string，商品编号（可选）
   - 返回数据:
     * code: 状态码（200表示成功）
     * message: 状态信息
     * data: {
         list: [ // 字段与数据库一致
           {
             analyze_id, ItemNo, resultId, analysis_result, analysis_month, tracking_result, createTime, is_urgent, category, updateTime, RemainingStock, averageSales, saleMonth, stockQty, track_saleMonth, inTransitTotal
           }
         ],
         pagination: {
           total: number,
           page: number,
           page_size: number
         }
       }
   - 权限: 需要token验证
#FUMA接口
## 查询正在审核中的订单

- **接口地址**：/api/excEmp/pending
- **请求方式**：POST
- **请求头**：Content-Type: application/json

### 请求参数
| 参数名   | 类型           | 必填 | 说明                         |
|----------|----------------|------|------------------------------|
| empId    | string/array   | 是   | 当前处理人ID，可单个或数组   |
| page     | number         | 否   | 页码，默认1                  |
| pageSize | number         | 否   | 每页条数，默认10             |
| pass     | string         | 是   | 接口密码（如：itblue21）     |

#### 请求示例
```json
{
  "empId": ["10001", "10002"],
  "page": 1,
  "pageSize": 10,
  "pass": "itblue21"
}
```

### 返回参数
| 字段      | 类型    | 说明                       |
|-----------|---------|----------------------------|
| code      | number  | 状态码，200成功            |
| msg       | string  | 提示信息                   |
| data      | object  | 结果对象                   |
| └─total   | number  | 总记录数                   |
| └─records | array   | 订单列表                   |
| └─page    | number  | 当前页码                   |
| └─pageSize| number  | 每页条数                   |

#### records每项字段（部分）
| 字段      | 说明                 |
|-----------|----------------------|
| FID       | saExcEmp主键         |
| ExcFID    | saExc主键            |
| CurrStep  | 当前步骤             |
| EmpID     | 当前处理人ID         |
| CNEmpName | 当前处理人中文名     |
| BeginTime | 开始时间             |
| ...       | ...                  |
| MouldID   | 模板ID（来自saExc）  |
| BillNo    | 单据编号（来自saExc）|
| FlowName  | 流程名称（来自saExc）|

#### 返回示例
```json
{
  "code": 200,
  "msg": "success",
  "data": {
    "total": 25,
    "records": [
      {
        "FID": "...",
        "ExcFID": "...",
        "CurrStep": "...",
        "EmpID": "10001",
        "CNEmpName": "张三",
        "BeginTime": "2024-06-01 10:00:00",
        "MouldID": "BP001",
        "BillNo": "PO20240601",
        "FlowName": "采购合同审批",
        // ... 其它字段
      }
      // ...更多记录
    ],
    "page": 1,
    "pageSize": 10
  }
}
```

## 订单审核接口

- **接口地址**：/api/excEmp/audit
- **请求方式**：POST
- **请求头**：Content-Type: application/json

### 请求参数
| 参数名   | 类型   | 必填 | 说明                 |
|----------|--------|------|----------------------|
| FID      | string | 是   | saExcEmp主键         |
| EmpState | number | 是   | 2=通过，1=驳回       |
| Notice   | string | 否   | 审核意见             |
| pass     | string | 是   | 接口密码（如itblue21）|

#### 请求示例
```json
{
  "FID": "xxx",
  "EmpState": 2,
  "Notice": "同意",
  "pass": "itblue21"
}
```

### 返回参数
| 字段      | 类型    | 说明                       |
|-----------|---------|----------------------------|
| code      | number  | 状态码，200成功            |
| msg       | string  | 提示信息                   |
| data      | null/[] | 无/错误信息                |

#### 返回示例
- 成功：
```json
{
  "code": 200,
  "msg": "success",
  "data": null
}
```
- 失败：
```json
{
  "code": 500,
  "msg": "错误信息",
  "data": []
}
```

## 获取订单审核详情

- **接口地址**：/api/excEmp/detail
- **请求方式**：POST
- **请求头**：Content-Type: application/json

### 请求参数
| 参数名 | 类型   | 必填 | 说明                 |
|--------|--------|------|----------------------|
| FID    | string | 是   | saExcEmp主键         |
| pass   | string | 是   | 接口密码（如itblue21）|

#### 请求示例
```json
{
  "FID": "xxx",
  "pass": "itblue21"
}
```

### 返回参数
| 字段      | 类型    | 说明                       |
|-----------|---------|----------------------------|
| code      | number  | 状态码，200成功            |
| msg       | string  | 提示信息                   |
| data      | object  | 详情对象                   |
| └─type    | string  | 类型（poPO/bpProducts）     |
| └─detail  | object  | 业务表详情                 |
| └─mouldID | string  | 模板ID                     |
| └─billNo  | string  | 单据编号                   |
| └─flowName| string  | 流程名称                   |

#### 返回示例（采购合同 poPO）
```json
{
  "code": 200,
  "msg": "success",
  "data": {
    "type": "poPO",
    "detail": {
      "FID": "...",
      "PONo": "PO20240601",
      "OwnerName": "张三",
      // ...其它poPO字段
      "productList": [
        {
          "FID": "...",
          "MFID": "...",
          "ItemNo": "A001",
          "OrderNo": 1,
          "PurQry": 100,
          "PONo": "PO20240601"
        }
        // ...更多明细
      ]
    },
    "mouldID": "PO004",
    "billNo": "PO20240601",
    "flowName": "采购合同审批"
  }
}
```

#### 返回示例（产品档案 bpProducts）
```json
{
  "code": 200,
  "msg": "success",
  "data": {
    "type": "bpProducts",
    "detail": {
      "FID": "...",
      "ItemNo": "A001",
      "OwnerName": "李四",
      // ...其它bpProducts字段
    },
    "mouldID": "BP001",
    "billNo": "A001",
    "flowName": "产品档案审批"
  }
}
```

#新增页面规则
 1 . 目录与命名规范
    - 新页面必须放在 src/views/ 下，按业务模块分文件夹，页面文件名采用小写加中划线（kebab-case）命名。
    - 页面组件名采用大驼峰（PascalCase）命名，且与文件名保持一致。
    - 页面目录结构建议：src/views/模块名/页面名/index.vue。
 2. 路由配置
    - 路由是动态加载，所以本地不需要任何配置。
 4. 组件与复用
    - 页面内如有通用组件，需优先复用 src/components/ 下已有组件，避免重复造轮子。
    - 新增通用组件需放在 src/components/，并遵循组件开发规范。
 5. 样式规范
    - 页面样式必须使用 scoped，禁止全局污染。
    - 禁止直接操作 DOM，需通过 Vue 方式实现。
 6. 注释规范
    - 所有新增功能需补充注释，重要逻辑需写明思路。
    - 代码必须通过 ESLint/Prettier 检查，禁止提交未格式化代码。
 7. 其他
    - 页面如需接口请求，必须通过 src/utils/http 封装的 PureHttp 实例。
    - 页面如需缓存（keep-alive），需按二级缓存规范配置。
 8. 页面按钮权限通过登录接口返回的 permissions 字段进行判断。
  -是用方法为  
        <Perms value="permission:btn:add">
          <el-button plain type="warning">
            拥有code：'permission:btn:add' 权限可见
          </el-button>
        </Perms>
